<?xml version="1.0" encoding="UTF-8"?>
<!--
scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:设置监测配置文件是否有修改的时间间隔，(通俗讲：就是设置多长时间查看一下logback.xml文件有没有被修改）如果没有给出时间单位，
            默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- 整个logback.xml文件中只有四个主要的标签：其一是根标签configuration，其余是三个子标签：appende，logger，root
    　　但是有人会疑问：那property和timestamp是做什么的？答案是：这两个标签是用来为以上提到的是三个子标签定义属性和赋值的。例如：
    　　第一个property标签中定义了一个USER_HOME属性，其值是/logs，scope是这个属性的作用范围，scope="context"是指该属性只能在本配置文件中使用。
    　　而timestamp定义了一个时间戳，也就是定义了一个时间格式，以供三个子标签使用。
    -->
    <property name="USER_HOME" value="d:/logs" />
    <property scope="context" name="FILE_NAME" value="mylog-logback" />
    <timestamp key="byDay" datePattern="yyyy-MM-dd" />

    <!-- 第一个子标签appender：
　　name:标签名，为了让其他标签调用的唯一标示，相当于html标签中的id
　　class:引用的类，从此类中可以看出该appender标签定义的是日志输出的位置，也就是往哪里输出
　　ch.qos.logback.core.ConsoleAppender可以看出是往控制台上输出。
　　encoder：该标签中定义了日志的输出格式
-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度   %msg：日志消息，%n是换行符
                  级别分别是：TRACE < DEBUG < INFO <WARN < ERROR
            -->
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n </pattern>
        </encoder>
    </appender>
    <!--
　　class:从此类中可以看出该appender标签定义的日志输出位置是回滚文件，也就是说：把日志输出到一个文件中，并且该文件可以回滚，至于怎么回滚请看下面的注释
    -->
    <appender name="log_file"  class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!--   定义了日志文件的目录结构和文件名：磁盘根目录：/logs/mylog-logback.log
        　　注意了：该文件名是在日志文件没有触发回滚要求时的文件名，也就是说现在的日志文件还没有满足xxMB，
        一旦满足了就会按照rollingPolicy里设置的属性进行重新命名
        -->
        <file>${USER_HOME}/${FILE_NAME}.log</file>
        <!--  rollingPolicy：回滚策略
        　　fileNamePattern：标签中定义的是日志文件一旦满足5MB就重新命名成新文件的命名格式，
        其中minIndex和maxIndex分别对应的是满足5MB的日志文件的命名序号（1~10）对应%i.log中的i值。
        如：mylog-logback-2016-07-12-1.log，mylog-logback-2016-07-12-2.log，mylog-logback-2016-07-12-3.log
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${USER_HOME}/${byDay}/${FILE_NAME}-${byDay}-%i.log</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>10</maxIndex>
        </rollingPolicy>
        <!-- 触发策略：当日志文件满足5MB就会出发回滚策略-->
        <triggeringPolicy   class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>5MB</maxFileSize>
        </triggeringPolicy>
        <!--%-4relative 表示，将输出从程序启动到创建日志记录的时间 进行左对齐 且最小宽度为4。-->
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %-4relative [%thread] %-5level %logger{35} - %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- 设置哪个目录或者包，类使用哪个日志
    将com.xdf包下的所有类的日志的打印，level是打印级别：debug，如果不设置level，它将继承它的上级<root>的日志级别“DEBUG”
    如果没有设置addtivity，默认为true，将此loger的打印信息向上级传递；
    如果没有设置appender-ref，此loger本身不打印任何信息。
    -->
    <!--    <logger name="com.xdf" level="debug" additivity="true">
            <appender-ref ref="console" />
        </logger>-->

    <root level="debug">
        <appender-ref ref="console" />
        <appender-ref ref="log_file" />
    </root>
</configuration>